// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeadersMessage {
    #[prost(map = "string, message", tag = "1")]
    pub metadata:
        ::std::collections::HashMap<::prost::alloc::string::String, headers_message::Values>,
}
/// Nested message and enum types in `HeadersMessage`.
pub mod headers_message {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Values {
        #[prost(string, repeated, tag = "1")]
        pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SpecificErrorRequest {
    #[prost(uint32, tag = "1")]
    pub code: u32,
    #[prost(string, tag = "2")]
    pub reason: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EmptyMessage {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DummyMessage {
    #[prost(string, tag = "1")]
    pub f_string: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub f_strings: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, tag = "3")]
    pub f_int32: i32,
    #[prost(int32, repeated, tag = "4")]
    pub f_int32s: ::prost::alloc::vec::Vec<i32>,
    #[prost(enumeration = "dummy_message::Enum", tag = "5")]
    pub f_enum: i32,
    #[prost(enumeration = "dummy_message::Enum", repeated, tag = "6")]
    pub f_enums: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "7")]
    pub f_sub: ::core::option::Option<dummy_message::Sub>,
    #[prost(message, repeated, tag = "8")]
    pub f_subs: ::prost::alloc::vec::Vec<dummy_message::Sub>,
    #[prost(bool, tag = "9")]
    pub f_bool: bool,
    #[prost(bool, repeated, tag = "10")]
    pub f_bools: ::prost::alloc::vec::Vec<bool>,
    #[prost(int64, tag = "11")]
    pub f_int64: i64,
    #[prost(int64, repeated, tag = "12")]
    pub f_int64s: ::prost::alloc::vec::Vec<i64>,
    #[prost(bytes = "vec", tag = "13")]
    pub f_bytes: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", repeated, tag = "14")]
    pub f_bytess: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(float, tag = "15")]
    pub f_float: f32,
    /// TODO: timestamp, duration, oneof, any, maps, fieldmask, wrapper type, struct, listvalue, value, nullvalue, deprecated
    #[prost(float, repeated, tag = "16")]
    pub f_floats: ::prost::alloc::vec::Vec<f32>,
}
/// Nested message and enum types in `DummyMessage`.
pub mod dummy_message {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Sub {
        #[prost(string, tag = "1")]
        pub f_string: ::prost::alloc::string::String,
    }
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum Enum {
        Enum0 = 0,
        Enum1 = 1,
        Enum2 = 2,
    }
    impl Enum {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Enum0 => "ENUM_0",
                Self::Enum1 => "ENUM_1",
                Self::Enum2 => "ENUM_2",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ENUM_0" => Some(Self::Enum0),
                "ENUM_1" => Some(Self::Enum1),
                "ENUM_2" => Some(Self::Enum2),
                _ => None,
            }
        }
    }
}

#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexReply {
    #[prost(string, tag = "1")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub endpoints: ::prost::alloc::vec::Vec<index_reply::Endpoint>,
}
/// Nested message and enum types in `IndexReply`.
pub mod index_reply {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Endpoint {
        #[prost(string, tag = "1")]
        pub path: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub description: ::prost::alloc::string::String,
    }
}
